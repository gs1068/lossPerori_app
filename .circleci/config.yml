version: 2
jobs:
  build:
    parameters:
      assets_precompile:
        description: "Whether or not do assets:precompile"
        type: boolean
        default: false
    docker:
      - image: circleci/ruby:2.6.6-node
        environment:
          RAILS_ENV: test
          BUNDLE_PATH: vendor/bundle
          BUNDLER_VERSION: 1.17.2
          DB_HOST: 127.0.0.1
          DB_USERNAME: "root"
          DB_PASSWORD: "password"
      - image: circleci/mysql:5.6
        environment:
          MYSQL_DATABASE: lossPerori_test
          MYSQL_USER: "root"
          MYSQL_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: "password"
          MYSQL_PASSWORD: dbuser
          MYSQL_ROOT_HOST: "%"
    steps:
      - run: gem install bundler -v $BUNDLER_VERSION
      - checkout
      - restore_cache:
          keys:
            - bundle-v2-{{ checksum "Gemfile.lock" }}
            - yarn-v1-{{ checksum "yarn.lock" }}
      - run: bin/bundle check || bin/bundle install --deployment
      - run:
          name: install yarn dependencies
          command: bundle exec yarn install
      - save_cache:
          key: bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      - run: bin/bundle exec rubocop
      - run:
          name: run tests
          command: |
            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --format progress
      - store_artifacts:
          path: coverage

      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy:
    docker:
      - image: circleci/ruby:2.6.3-node
    working_directory: ~/lossPerori
    steps:
      - checkout
      - run:
          name: "Install Heroku CLI, if necessary"
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          name: Deploy to Heroku_Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
